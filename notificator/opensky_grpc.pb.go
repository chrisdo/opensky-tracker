// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: notificator/opensky.proto

package notificator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificatorClient is the client API for Notificator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificatorClient interface {
	GetRegionUpdates(ctx context.Context, in *Region, opts ...grpc.CallOption) (Notificator_GetRegionUpdatesClient, error)
}

type notificatorClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorClient(cc grpc.ClientConnInterface) NotificatorClient {
	return &notificatorClient{cc}
}

func (c *notificatorClient) GetRegionUpdates(ctx context.Context, in *Region, opts ...grpc.CallOption) (Notificator_GetRegionUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notificator_ServiceDesc.Streams[0], "/notificator.Notificator/GetRegionUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificatorGetRegionUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notificator_GetRegionUpdatesClient interface {
	Recv() (*FlightStatus, error)
	grpc.ClientStream
}

type notificatorGetRegionUpdatesClient struct {
	grpc.ClientStream
}

func (x *notificatorGetRegionUpdatesClient) Recv() (*FlightStatus, error) {
	m := new(FlightStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificatorServer is the server API for Notificator service.
// All implementations must embed UnimplementedNotificatorServer
// for forward compatibility
type NotificatorServer interface {
	GetRegionUpdates(*Region, Notificator_GetRegionUpdatesServer) error
	mustEmbedUnimplementedNotificatorServer()
}

// UnimplementedNotificatorServer must be embedded to have forward compatible implementations.
type UnimplementedNotificatorServer struct {
}

func (UnimplementedNotificatorServer) GetRegionUpdates(*Region, Notificator_GetRegionUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRegionUpdates not implemented")
}
func (UnimplementedNotificatorServer) mustEmbedUnimplementedNotificatorServer() {}

// UnsafeNotificatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificatorServer will
// result in compilation errors.
type UnsafeNotificatorServer interface {
	mustEmbedUnimplementedNotificatorServer()
}

func RegisterNotificatorServer(s grpc.ServiceRegistrar, srv NotificatorServer) {
	s.RegisterService(&Notificator_ServiceDesc, srv)
}

func _Notificator_GetRegionUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Region)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificatorServer).GetRegionUpdates(m, &notificatorGetRegionUpdatesServer{stream})
}

type Notificator_GetRegionUpdatesServer interface {
	Send(*FlightStatus) error
	grpc.ServerStream
}

type notificatorGetRegionUpdatesServer struct {
	grpc.ServerStream
}

func (x *notificatorGetRegionUpdatesServer) Send(m *FlightStatus) error {
	return x.ServerStream.SendMsg(m)
}

// Notificator_ServiceDesc is the grpc.ServiceDesc for Notificator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notificator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notificator.Notificator",
	HandlerType: (*NotificatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRegionUpdates",
			Handler:       _Notificator_GetRegionUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notificator/opensky.proto",
}
